group_by(treatment) %>%
summarise(
mean_self_censorship1 = mean(selfcens_index1, na.rm = TRUE),
mean_self_censorship2 = mean(selfcens_index2, na.rm = TRUE),
mean_self_censorship3 = mean(selfcens_index3, na.rm = TRUE),
count = n(),
.groups = "drop"
) %>%
mutate(treatment = recode(treatment, `0` = "Pre-treatment (Democratic Regime)", `1` = "Post-treatment (Authoritarian Regime)"))
self_censorship_summary
#saving in exl file
#library(writexl)
#write_xlsx(self_censorship_summary, "self_censorship_summary.xlsx")
#graph
library(tidyr)
library(ggplot2)
self_censorship_long <- matched_df %>%
gather(index, value, starts_with("selfcens_index")) %>%
group_by(treatment, index) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
mutate(treatment = recode(treatment, `0` = "Control", `1` = "Treatment"))
ggplot(self_censorship_long, aes(x = treatment, y = mean_value, fill = index)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Mean Self-censorship Indices by Treatment Group") +
labs(x = "Groups", y = "Mean Self-censorship Index") +
scale_fill_manual(values = c("#67a9cf", "#ef8a62", "#a6d854")) +
facet_grid(cols = vars(index), scales = "free_x") +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5))
##Descriptive Statistics
library(dplyr)
# Counts and percentages for categorical variables
treatment_summary <- matched_df %>%
group_by(treatment) %>%
summarise(
count = n(),
percentage = count / nrow(matched_df) * 100
)
sex_summary <- matched_df %>%
group_by(treatment, sex) %>%
summarise(
count = n(),
percentage = count / sum(count) * 100
)
regime_support_summary <- matched_df %>%
group_by(treatment, regime_supporter) %>%
summarise(
count = n(),
percentage = count / sum(count) * 100
)
# Summary statistics for continuous variables
continuous_summary <- matched_df %>%
group_by(treatment) %>%
summarise(
age_mean = mean(age, na.rm = TRUE),
age_sd = sd(age, na.rm = TRUE),
educ_mean = mean(educ, na.rm = TRUE),
educ_sd = sd(educ, na.rm = TRUE),
income_mean = mean(income, na.rm = TRUE),
income_sd = sd(income, na.rm = TRUE)
)
# Combine summary tables
summary_table <- list(
Treatment = treatment_summary,
Sex = sex_summary,
Regime_Support = regime_support_summary,
Continuous_Variables = continuous_summary
)
summary_table
# three models for three self-censorship indexes
# lm_robust provides robust standard errors that account for potential heteroskedasticity or within-group correlation in the data.
mod1 <- lm_robust(selfcens_index1 ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
mod2 <- lm_robust(selfcens_index2 ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
mod3 <- lm_robust(selfcens_index3 ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
#summary for 3 different models
mod1
mod2
mod3
#presenting in one table
library(knitr)
# Create a table of model summaries
summary1 <- summary(mod1)$coefficients["treatment", ]
summary2 <- summary(mod2)$coefficients["treatment", ]
summary3 <- summary(mod3)$coefficients["treatment", ]
summary_table_3mod <- data.frame(
Index = c("selfcens_index1", "selfcens_index2", "selfcens_index3"),
Estimate = c(summary1[1], summary2[1], summary3[1]),
SE = c(summary1[2], summary2[2], summary3[2]),
t_value = c(summary1[3], summary2[3], summary3[3]),
p_value = c(summary1[4], summary2[4], summary3[4])
)
kable(summary_table_3mod, digits = 3, align = "c") # Use kable function to create a table
#save in working directory
#library(writexl)
#write_xlsx(summary_table_3mod, "summary_table_3mod.xlsx")
# Load required packages
library(broom)
library(ggplot2)
# Tidy the models
tidy_mod1 <- tidy(mod1) %>% mutate(index = "Selfcensorship Index1")
tidy_mod2 <- tidy(mod2) %>% mutate(index = "Selfcensorship Index2")
tidy_mod3 <- tidy(mod3) %>% mutate(index = "Selfcensorship Index3")
# Combine the tidied models
tidy_models <- bind_rows(tidy_mod1, tidy_mod2, tidy_mod3)
# Filter out the treatment coefficients
treatment_coefs <- tidy_models %>% filter(term == "treatment")
# Create a coefficient plot with custom colors and centered title
coef_plot <- ggplot(treatment_coefs, aes(x = index, y = estimate, ymin = conf.low, ymax = conf.high, color = index)) +
geom_pointrange(size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Authoritarian Treatment Effects on Self-Censorship Indexes",
x = "Self-Censorship Index",
y = "Authoritarian Treatment Effect") +
scale_color_manual(values = c("#67a9cf", "#ef8a62", "#a6d854")) +
theme_minimal() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) # Center the title
# Print the coefficient plot
coef_plot
# Load required packages
library(broom)
library(ggplot2)
# Tidy the models
tidy_mod1 <- tidy(mod1) %>% mutate(index = "Selfcensorship Index1")
tidy_mod2 <- tidy(mod2) %>% mutate(index = "Selfcensorship Index2")
tidy_mod3 <- tidy(mod3) %>% mutate(index = "Selfcensorship Index3")
# Combine the tidied models
tidy_models <- bind_rows(tidy_mod1, tidy_mod2, tidy_mod3)
# Filter out the treatment coefficients
treatment_coefs <- tidy_models %>% filter(term == "treatment")
# Create a coefficient plot with custom colors and centered title
coef_plot <- ggplot(treatment_coefs, aes(x = index, y = estimate, ymin = conf.low, ymax = conf.high, color = index)) +
geom_pointrange(size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Authoritarian Treatment Effects on Self-Censorship Indexes",
x = "Self-Censorship Index",
y = "Authoritarian Treatment Effect") +
scale_color_manual(values = c("#67a9cf", "#ef8a62", "#a6d854")) +
theme_minimal() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) # Center the title
# Print the coefficient plot
coef_plot
# Set a seed
set.seed(123)
# Load required packages
library(randomizr)
library(broom)
library(knitr)
# Define the outcome variables and treatment variable
outcomes <- c("selfcens_index1", "selfcens_index2", "selfcens_index3")
treatment_var <- "treatment"
# Conduct multiple hypothesis tests
results <- data.frame(Index = outcomes,
Estimate = numeric(length(outcomes)),
X95_CI_lower = numeric(length(outcomes)),
X95_CI_upper = numeric(length(outcomes)),
p_value = numeric(length(outcomes)),
adj_p_value = numeric(length(outcomes)))
for (i in seq_along(outcomes)) {
model <- lm_robust(as.formula(paste(outcomes[i], " ~ ", treatment_var)),
fixed_effects = ~ match_group, data = matched_df)
summary_model <- summary(model)
# Extract treatment coefficient and standard error
beta_hat <- summary_model$coefficients["treatment", "Estimate"]
se_hat <- summary_model$coefficients["treatment", "Std. Error"]
# Calculate 95% confidence interval
ci_lower <- beta_hat - qt(0.975, df = summary_model$df) * se_hat
ci_upper <- beta_hat + qt(0.975, df = summary_model$df) * se_hat
# Calculate p-value and adjusted p-value
p_value <- summary_model$coefficients["treatment", "Pr(>|t|)"]
adj_p_value <- p.adjust(p_value, method = "bonferroni")
# Store results in data frame
results[i, "Estimate"] <- beta_hat
results[i, "X95_CI_lower"] <- ci_lower
results[i, "X95_CI_upper"] <- ci_upper
results[i, "p_value"] <- p_value
results[i, "adj_p_value"] <- adj_p_value
}
# Print table of results
kable(results, digits = c(2, 2, 2, 4, 4), align = "c")
# Set a seed
set.seed(123)
# Load required packages
library(randomizr)
library(broom)
library(knitr)
# Define the outcome variables and treatment variable
outcomes <- c("selfcens_index1", "selfcens_index2", "selfcens_index3")
treatment_var <- "treatment"
# Conduct multiple hypothesis tests
results <- data.frame(Index = outcomes,
Estimate = numeric(length(outcomes)),
X95_CI_lower = numeric(length(outcomes)),
X95_CI_upper = numeric(length(outcomes)),
p_value = numeric(length(outcomes)),
adj_p_value = numeric(length(outcomes)))
for (i in seq_along(outcomes)) {
model <- lm_robust(as.formula(paste(outcomes[i], " ~ ", treatment_var)),
fixed_effects = ~ match_group, data = matched_df)
summary_model <- summary(model)
# Extract treatment coefficient and standard error
beta_hat <- summary_model$coefficients["treatment", "Estimate"]
se_hat <- summary_model$coefficients["treatment", "Std. Error"]
# Calculate 95% confidence interval
ci_lower <- beta_hat - qt(0.975, df = summary_model$df) * se_hat
ci_upper <- beta_hat + qt(0.975, df = summary_model$df) * se_hat
# Calculate p-value and adjusted p-value
p_value <- summary_model$coefficients["treatment", "Pr(>|t|)"]
adj_p_value <- p.adjust(p_value, method = "bonferroni")
# Store results in data frame
results[i, "Estimate"] <- beta_hat
results[i, "X95_CI_lower"] <- ci_lower
results[i, "X95_CI_upper"] <- ci_upper
results[i, "p_value"] <- p_value
results[i, "adj_p_value"] <- adj_p_value
}
# Print table of results
kable(results, digits = c(2, 2, 2, 4, 4), align = "c")
#item wise estimations
mod_petition <- lm_robust(selfcens_petition ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_petition) |>
count()
mod_petition
mod_boycott <- lm_robust(selfcens_boycott ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_boycott) |>
count()
mod_boycott
mod_confgov <- lm_robust(selfcens_confgov ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_confgov) |>
count()
mod_confgov
mod_partyvote <- lm_robust(selfcens_vote ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_vote) |>
count()
mod_partyvote
mod_democracy <- lm_robust(selfcens_democracy ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_democracy) |>
count()
mod_democracy
library(tidyverse)
# create a data frame with the estimated treatment effects and standard errors
coef_df <- tibble(
item = c("Petition", "Boycott", "Confidence in government", "Party vote", "Democracy"),
est = c(coef(mod_petition)["treatment"], coef(mod_boycott)["treatment"],
coef(mod_confgov)["treatment"], coef(mod_partyvote)["treatment"],
coef(mod_democracy)["treatment"]),
se = c(mod_petition$std.error["treatment"], mod_boycott$std.error["treatment"],
mod_confgov$std.error["treatment"], mod_partyvote$std.error["treatment"],
mod_democracy$std.error["treatment"])
)
# calculate the upper and lower bounds of the confidence interval
coef_df <- coef_df %>%
mutate(lb = est - qt(0.025, df = sum(mod_petition$df["Residual"])),
ub = est + qt(0.025, df = sum(mod_petition$df["Residual"])))
# define the color palette
palette <- c("#F8766D", "#00BA38", "#619CFF", "#FDAE61", "#7A6A5F")
# plot the estimated treatment effects and confidence intervals
ggplot(coef_df, aes(x = item, y = est, ymin = lb, ymax = ub, fill = item)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_pointrange(size = 1.2, shape = 21, color = "black") +
geom_errorbar(width = 0.2, color = "black") +
coord_flip() +
labs(x = "", y = "Estimated Treatment Effects on Politically Sensitive Items") +
scale_fill_manual(values = palette) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1, color = "black"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 10),
legend.position = "none"
)
library(tidyverse)
# create a data frame with the estimated treatment effects and standard errors
coef_df <- tibble(
item = c("Petition", "Boycott", "Confidence in government", "Party vote", "Democracy"),
est = c(coef(mod_petition)["treatment"], coef(mod_boycott)["treatment"],
coef(mod_confgov)["treatment"], coef(mod_partyvote)["treatment"],
coef(mod_democracy)["treatment"]),
se = c(mod_petition$std.error["treatment"], mod_boycott$std.error["treatment"],
mod_confgov$std.error["treatment"], mod_partyvote$std.error["treatment"],
mod_democracy$std.error["treatment"])
)
# calculate the upper and lower bounds of the confidence interval
coef_df <- coef_df %>%
mutate(lb = est - qt(0.025, df = sum(mod_petition$df["Residual"])),
ub = est + qt(0.025, df = sum(mod_petition$df["Residual"])))
# define the color palette
palette <- c("#F8766D", "#00BA38", "#619CFF", "#FDAE61", "#7A6A5F")
# plot the estimated treatment effects and confidence intervals
ggplot(coef_df, aes(x = item, y = est, ymin = lb, ymax = ub, fill = item)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_pointrange(size = 1.2, shape = 21, color = "black") +
geom_errorbar(width = 0.2, color = "black") +
coord_flip() +
labs(x = "", y = "Estimated Treatment Effects on Politically Sensitive Items") +
scale_fill_manual(values = palette) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1, color = "black"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 10),
legend.position = "none"
)
#item wise estimations
mod_conftv <- lm_robust(selfcens_conftv ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_conftv) |>
count()
mod_conftv
mod_trust <- lm_robust(selfcens_trust ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_trust) |>
count()
mod_trust
mod_incomeineq <- lm_robust(selfcens_incomeineq ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_incomeineq) |>
count()
mod_incomeineq
mod_nationalpride<- lm_robust(selfcens_nationalpride ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_nationalpride) |>
count()
mod_nationalpride
mod_discuss<- lm_robust(selfcens_discuss ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_discuss) |>
count()
mod_discuss
library(tidyverse)
# create a data frame with the estimated treatment effects and standard errors
coef_df2 <- tibble(
item = c("Confidence in TV", "Trust in people", "Income inequality vs equality",
"National pride", "Discussion of politics with friends"),
est = c(coef(mod_conftv)["treatment"], coef(mod_trust)["treatment"],
coef(mod_incomeineq)["treatment"], coef(mod_nationalpride)["treatment"],
coef(mod_discuss)["treatment"]),
se = c(mod_conftv$std.error["treatment"], mod_trust$std.error["treatment"],
mod_incomeineq$std.error["treatment"], mod_nationalpride$std.error["treatment"],
mod_discuss$std.error["treatment"])
)
# calculate the upper and lower bounds of the confidence interval
coef_df2 <- coef_df2 %>%
mutate(lb = est - qt(0.025, df = sum(mod_conftv$df["Residual"])),
ub = est + qt(0.025, df = sum(mod_conftv$df["Residual"])))
# define the color palette
palette2 <- c("#F8766D", "#00BA38", "#619CFF", "#FDAE61", "#7A6A5F")
# plot the estimated treatment effects and confidence intervals
ggplot(coef_df2, aes(x = item, y = est, ymin = lb, ymax = ub, fill = item)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_pointrange(size = 1.2, shape = 21, color = "black") +
geom_errorbar(width = 0.2, color = "black") +
coord_flip() +
labs(x = "", y = "Estimated Treatment Effects on Politically Nonsensitive Items") +
scale_fill_manual(values = palette2) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1, color = "black"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 10),
legend.position = "none"
)
mod_family<- lm_robust(selfcens_family ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_family) |>
count()
mod_family
mod_happiness<- lm_robust(selfcens_happiness ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_happiness) |>
count()
mod_happiness
mod_leisure<- lm_robust(selfcens_leisure ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_leisure) |>
count()
mod_leisure
mod_friends<- lm_robust(selfcens_friends ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_friends) |>
count()
mod_friends
mod_work<- lm_robust(selfcens_work ~ treatment,
fixed_effects = ~ match_group,
data = matched_df)
matched_df |>
group_by(treatment, selfcens_work) |>
count()
mod_work
library(tidyverse)
# create a data frame with the estimated treatment effects and standard errors
coef_df2 <- tibble(
item = c("Confidence in TV", "Trust in people", "Income inequality vs equality",
"National pride", "Discussion of politics with friends"),
est = c(coef(mod_conftv)["treatment"], coef(mod_trust)["treatment"],
coef(mod_incomeineq)["treatment"], coef(mod_nationalpride)["treatment"],
coef(mod_discuss)["treatment"]),
se = c(mod_conftv$std.error["treatment"], mod_trust$std.error["treatment"],
mod_incomeineq$std.error["treatment"], mod_nationalpride$std.error["treatment"],
mod_discuss$std.error["treatment"])
)
# calculate the upper and lower bounds of the confidence interval
coef_df2 <- coef_df2 %>%
mutate(lb = est - qt(0.025, df = sum(mod_conftv$df["Residual"])),
ub = est + qt(0.025, df = sum(mod_conftv$df["Residual"])))
# define the color palette
palette2 <- c("#F8766D", "#00BA38", "#619CFF", "#FDAE61", "#7A6A5F")
# plot the estimated treatment effects and confidence intervals
ggplot(coef_df2, aes(x = item, y = est, ymin = lb, ymax = ub, fill = item)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_pointrange(size = 1.2, shape = 21, color = "black") +
geom_errorbar(width = 0.2, color = "black") +
coord_flip() +
labs(x = "", y = "Estimated Treatment Effects on Politically Nonsensitive Items") +
scale_fill_manual(values = palette2) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1, color = "black"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 10),
legend.position = "none"
)
library(tidyverse)
# create a data frame with the estimated treatment effects and standard errors
coef_df3 <- tibble(
item = c("Importance of Family", "Feeling of Happiness", "Importance of Leisure",
"Importance of Friends", " Importance of Work"),
est = c(coef(mod_family)["treatment"], coef(mod_happiness)["treatment"],
coef(mod_leisure)["treatment"], coef(mod_friends)["treatment"],
coef(mod_work)["treatment"]),
se = c(mod_family$std.error["treatment"], mod_happiness$std.error["treatment"],
mod_leisure$std.error["treatment"], mod_friends$std.error["treatment"],
mod_work$std.error["treatment"])
)
# calculate the upper and lower bounds of the confidence interval
coef_df3 <- coef_df3 %>%
mutate(lb = est - qt(0.025, df = sum(mod_family$df["Residual"])),
ub = est + qt(0.025, df = sum(mod_family$df["Residual"])))
# define the color palette
palette3 <- c("#F8766D", "#00BA38", "#619CFF", "#FDAE61", "#7A6A5F")
# plot the estimated treatment effects and confidence intervals
ggplot(coef_df3, aes(x = item, y = est, ymin = lb, ymax = ub, fill = item)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_pointrange(size = 1.2, shape = 21, color = "black") +
geom_errorbar(width = 0.2, color = "black") +
coord_flip() +
labs(x = "", y = "Estimated Treatment Effects on Totally Nonsensitive Items") +
scale_fill_manual(values = palette3) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1, color = "black"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 10),
legend.position = "none"
)
